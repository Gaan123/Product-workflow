security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        my_mongo_provider:
            mongodb:
                class: App\Document\User
                property: username

    firewalls:

        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern: ^/api
            stateless: true
            jwt: ~
        admin_api:
            pattern: ^/api/admin
            stateless: true
            security: true
            jwt: ~
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
#        main:
#            lazy: true
#            provider: users_in_memory

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/admin/products/create, roles: ROLE_SELLER }
        - { path: ^/api/admin/products/transitions, roles: [ROLE_ADMIN,ROLE_SEO] }
        - { path: ^/api/admin/products, roles: [ROLE_SELLER,ROLE_ADMIN,ROLE_SEO] }
        - { path: ^/api/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
